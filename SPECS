* is it possible to distinguish between pipes and normal stdout?
* --unstructured / -U forces unstructured output

* {success: "true", type: "System.POSIX.File", data: "..."}
* {success: "false", errorType: "WrongDataType", errorText: "Wrong type has been submitted"}

* on error input -> output un/structured error

* different tools - yls, yfilter, ysort, ygroup, yfold, yformat
* composability - combine small scripts into bigger scripts / "functions"
	* can we curry? :>

* typed json?
	* if not - runtime type "inference" - 1M, true, yesterday, +

* examples
	* yls -R | yfilter "permissions.oread == true && size > 1M" | yfold + size
	* yls | yfold "\a x -> a + size x" path
	* yls | yfilter "file path == '*ASCII*'"

* permissions.oread == true && size > 1M
	* \path size permissions.oread ... -> permissions.oread == true && size > 1M
* \a x -> a + size x
	* a + size x

* isascii.sh:
	* yeval "\path -> file path == '*ASCII*'"
	* then: yls | yfilter isascii.sh

* differentiate between stdin and command line arguments
* how to carry human readable output along the pipes?

* expr types: regexp, int, float, bool, date
* value types: string, int, float

* parens!
* schema!

* -fls = pipe output through yformat -ls
	* yfind | yfilter 'mtime > 11:20' | yformat -ls
	* yfind | yfilter -fls 'mtime > 11:20'

* type inference:
	* 'path = * && mtime > 11:20'
	* 'mtime > yesterday'

* ymove, yremove, ycopy, ymodify (modify any keypath)
